import React from 'react';
import ReactApexChart from 'react-apexcharts';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

const BarChart = ({ seriesData, categories }) => {
console.log("üöÄ ~ BarChart ~ seriesData:", seriesData)

    const options = {
        chart: {
            type: 'bar',
            height: 350
        },
        plotOptions: {
            bar: {
                borderRadius: 4,
                borderRadiusApplication: 'end',
                horizontal: true,
            }
        },
        dataLabels: {
            enabled: false
        },
        xaxis: {
            categories: categories,
        }
    };

    const exportToExcel = async () => {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Sheet1');

        // Th√™m ti√™u ƒë·ªÅ v√† th√¥ng tin b·ªï sung b·∫Øt ƒë·∫ßu t·ª´ c·ªôt D
        const authorRow = worksheet.addRow(['H·ªá th·ªëng chu·ªói r·∫°p phim TvN Cinema']);
        const dateRow = worksheet.addRow(['Ng√†y xu·∫•t: ' + new Date().toLocaleDateString()]);
        worksheet.addRow([]); // D√≤ng tr·ªëng
        const titleRow = worksheet.addRow(['', '', '', 'B√ÅO C√ÅO TH·ªêNG K√ä TOP PHIM ƒê√ÅNH GI√Å CAO NH·∫§T']);
        worksheet.addRow([]); // D√≤ng tr·ªëng
        const headerRow = worksheet.addRow(['', '', '', 'STT', 'T√™n phim', 'S·ªë sao ƒë√°nh gi√°']);

        // ƒê·ªãnh d·∫°ng c√°c h√†ng ti√™u ƒë·ªÅ
        [authorRow, dateRow].forEach(row => {
            if (row.actualCellCount > 0) { // Ch·ªâ merge khi c√≥ d·ªØ li·ªáu trong h√†ng
                worksheet.mergeCells(`A${row.number}:C${row.number}`);
                row.font = { bold: true };
            }
        });
        [titleRow].forEach(row => {
            if (row.actualCellCount > 0) { // Ch·ªâ merge khi c√≥ d·ªØ li·ªáu trong h√†ng
                worksheet.mergeCells(`D${row.number}:F${row.number}`);
                row.getCell(4).alignment = { horizontal: 'center' };
                row.getCell(4).font = { bold: true , size: 16};
            }
        });

        // ƒê·ªãnh d·∫°ng ti√™u ƒë·ªÅ v√† c√°c √¥ d·ªØ li·ªáu
        headerRow.font = { bold: true };
        headerRow.alignment = { horizontal: 'center' };
        headerRow.eachCell((cell, colNumber) => {
            if (colNumber >= 4) {
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'FFFF00' }  // M√†u n·ªÅn v√†ng
                };
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
            }
        });

        // Th√™m d·ªØ li·ªáu bi·ªÉu ƒë·ªì
        seriesData[0].data.forEach((value, index) => {
            const rowNumber = index + 1; // S·ªë th·ª© t·ª± b·∫Øt ƒë·∫ßu t·ª´ 1
            const row = worksheet.addRow(['', '', '', rowNumber, categories[index], value]);

            // Th√™m vi·ªÅn khung cho c√°c √¥ d·ªØ li·ªáu
            row.eachCell({ includeEmpty: false }, (cell, colNumber) => {
                if (colNumber >= 4) { // Ch·ªâ √°p d·ª•ng ƒë·ªãnh d·∫°ng cho c√°c c·ªôt t·ª´ D tr·ªü ƒëi
                    cell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                    cell.alignment = { horizontal: 'center' };
                }
            });
        });

        // ƒê·ªãnh d·∫°ng chi·ªÅu r·ªông cho t·ª´ng c·ªôt
        worksheet.columns = [
            { width: 12 },  // C·ªôt A (tr·ªëng)
            { width: 10 },   // C·ªôt B (tr·ªëng)
            { width: 10 },   // C·ªôt C (tr·ªëng)
            { width: 8 },  // C·ªôt D (STT)
            { width: 45 },   // C·ªôt E (T√™n phim)
            { width: 20 },   // C·ªôt F (S·ªë sao ƒë√°nh gi√°)
        ];

        // Xu·∫•t file Excel
        const buffer = await workbook.xlsx.writeBuffer();
        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        saveAs(blob, 'top_movie_chart.xlsx');
    };


    return (
        <div>
            <div className='text-end'>
                <button onClick={exportToExcel}>Export to Excel</button>
            </div>
            <div id="chart">
                <ReactApexChart options={options} series={seriesData} type="bar" height={350} />
            </div>
            <div id="html-dist"></div>
        </div>
    );
}

export default BarChart;
